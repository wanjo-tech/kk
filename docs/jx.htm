<h1>jx=TINY WEB-JS TEMPLATE ENGINE by datakk</h1>
<h3>DOC&TESTER=<a href="https://kk.datakk.com/jx.htm" target=_blank>https://kk.datakk.com/jx.htm</a><h3>
<h3>CODE=<a href="https://github.com/wanjo-tech/kk/blob/main/docs/jx.js" target=_blank>https://github.com/wanjo-tech/kk/blob/main/docs/jx.js</a><h3>
<h3>CDN=<a href="https://static.datakk.com/jx.js" target=_blank>https://static.datakk.com/jx.js</a><h3>
<h3>DESIGN_PATTERN=(evt,data)=>UPSERT(target,BUILD(tpl,UPDATE(data,event)))</h3>
<h3>DEBUG=[...document.querySelectorAll('[j-err],[j-warn]')].map(console.log)</h3>
<script src='jx.js'></script>
<script>
var {s2bdy,jxTryEval,jxBuild,jxUpsert,s2el,s2o,o2s}=jx()
var now = () => new Date().getTime()/1000;
var gData = {}
function Build(){
  var data_s = stageData.value
  //console.log('data_s',data_s)
  var data = jxTryEval(`(${data_s})`,{},console.log)
  Object.assign(gData,data)
  //console.log('data',data)
  //var template = tpl.innerHTML
  //var template = tplStage.textContent
  template = tplStage.value
  //console.log('template',template)
var t0=now()
  var elTemplate = s2bdy(template);
var t1=now()
  //var built = jxBuild(elTemplate, data);
  var built = jxBuild(elTemplate, gData);
var t2=now()
  var s = built.innerHTML
var t3=now()
  stageCode.value=s
var t4=now()
  stageDebug.value=JSON.stringify(['compile',t1-t0,'jxBuild',t2-t1,'2s',t3-t2,'show',t4-t3])
  return built 
}
function Render(){
var t0=now()
  //jxUpsert(divStage,Build())
  var data = jxTryEval(`(${stageData.value})`)
  Object.assign(gData,data)
  //jxUpsert(divStage,jxBuild(s2bdy(tplStage.value),jxTryEval(`(${stageData.value})`)))
  jxUpsert(divStage,jxBuild(s2bdy(tplStage.value),gData))
var t1=now()
  //stageDebug.textContent+=`=>Render ${t1-t0}`
  stageDebug.value+=`=>Render ${t1-t0}`
}
function testIf(){
  stageData.value = `{f1a:Math.random()>0.5,thisDate:new Date()}` //o2s({f1a:(Math.random()>0.2),thisDate:new Date()})
  tplStage.value = tplIf.innerHTML
  stageDebug.value=''
  Render()
}
</script>
<hr/>
<button onclick='Build()'>Build</button> <button onclick='Render()'>Render</button> tpl=
<a href='javascript:testIf()'>j-if</a>
<br/>
<template id='tplIf'>
thisDate={{thisDate}}
<div j-if='f1a'>f1a={{f1a}}
<span j-else>f1a={{f1a}}
</div>
</template>
<textarea id='tplStage' style="border:1px solid;min-width:640px;min-height:150px">
<br/>test @change <input @change='(console.log("on change=>",this.value,event),true)' value='abcd'/>
<h3>thisDate={{thisDate}}</h3>
<div j-for="val,key,idx in wtf"><li>{{ idx+","+key+":"+val }}</li></div>
<font>OK {{ new Date() }}</font>
<font>KO {{ new XXX() }}</font>
<div j-if="f1">
  <font color=red>L1-if</font>
  <div j-else><font color=blue>L1-else</font></div>
</div>
<div j-if="true"><font color=green>L1-true
  <div j-if="f2a">L2-f2a</div>
  <div j-if="f2b">L2-f2b</div>
</font></div>
<div j-for="ERR in items"><li>{{ idx+","+key+":"+val }}</li></div>
<div j-for="(val,key,idx) in items"><li>{{ idx+","+key+":"+val }}</li></div>
<div j-for="val,key,idx in items"><li>{{ idx+","+key+":"+val }}</li></div>
<div j-for="(val,key,idx) in itemsb">
  <li>{{ idx+","+key+":"+val }}</li>
</div>
<div j-for="(val,key) in itemsb"><li>{{key+":"+val}}</li></div>
<div j-for="val,key in itemsb"><li>{{key+":"+val}}</li></div>
<div j-for="(val) in itemsb"><li>{{val}}</li></div>
<div j-for="val in itemsb"><li>{{val}}</li></div>
<div j-for="val in itemsb"><li>{{TestSyntaxError2}}</li></div>
test j-text
<div j-for="val in itemsb" j-text="val"></div>

</textarea>
<br/>data=<br/>
<textarea id='stageData' style='border:1px solid;min-width:640px;min-height:50px'>
{thisDate:new Date(), items: ["Apple", "Banana", "Cherry"], itemsb:{Apple:222,Banana:333,Cherry:444}, f2b:true}
</textarea>
<br/>debug=<br/>
<textarea id='stageDebug' style='border:1px solid;min-width:640px;min-height:30px'></textarea>
<br/>Build=<br/>
<textarea id='stageCode' style='border:1px solid;min-width:640px;min-height:150px'></textarea>
<br/>render=<br/>
<div style='border:1px solid;width:99%;' id='divStage'></div>
<!--
cancelled:
    if (theAttribute=node.getAttribute?.('j-bind')) {
      if (node.tagName === 'INPUT' || node.tagName === 'TEXTAREA') {
        returnNode.value = data[theAttribute] || '';
        bindings.push({ propName: theAttribute, element: returnNode });
        returnNode.addEventListener('input', (event) => {
console.log('input',event.target.value)
          data[theAttribute] = event.target.value;
          bindings.forEach(binding => {
            if (binding.propName === theAttribute && binding.element !== event.target) {
console.log('binding',binding)
              binding.element.value = event.target.value;
            }
          });
        });
      }
    }

-->
